{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1046\deflangfe1046{\fonttbl{\f0\fswiss\fprq2\fcharset0 Arial;}{\f1\fnil\fcharset0 Arial;}}
{\colortbl ;\red0\green0\blue0;}
{\*\generator Riched20 10.0.18362}{\*\mmathPr\mdispDef1\mwrapIndent1440 }\viewkind4\uc1 
\pard\nowidctlpar\sa200\ul\b\f0\fs28\lang22 FUNCTION LIST\par
\ulnone\fs24\par
GetMaxIndex()\par
GetMinUserIndex()\par
GetMaxUserIndex()\par
GetMinMonsterIndex()\par
GetMaxMonsterIndex()\par
GetGameServerCode()\par
GetGameServerLang()\par
GetGameServerUpdate()\par
GetGameServerVersion()\par
GetGameServerCurUser()\par
GetGameServerMaxUser()\par
\cf1\f1 GetLicenseId(\lang1046 )\lang22\par
GetLicensePackage(\lang1046 )\lang22\par
GetLicensePlan(\lang1046 )\lang22\par
GetLicenseUpdate(\lang1046 )\lang22\par
GetLicenseCustomerName(\lang1046 )\cf0\f0\lang22\par
GetObjectConnected()\par
GetObjectIpAddress()\par
GetObjectLang()\par
GetObjectType()\par
GetObjectAccount()\par
GetObjectName()\par
GetObjectPersonalCode()\par
GetObjectClass()\par
GetObjectChangeUp()\par
GetObjectLevel()\par
GetObjectLevelUpPoint()\par
GetObjectMoney()\par
GetObjectRuud()\par
GetObjectStrength()\par
GetObjectDexterity()\par
GetObjectVitality()\par
GetObjectEnergy()\par
GetObjectLeadership()\par
GetObjectExtraStrength()\par
GetObjectExtraDexterity()\par
GetObjectExtraVitality()\par
GetObjectExtraEnergy()\par
GetObjectExtraLeadership()\par
GetObjectDefaultStrength()\par
GetObjectDefaultDexterity()\par
GetObjectDefaultVitality()\par
GetObjectDefaultEnergy()\par
GetObjectDefaultLeadership()\par
GetObjectLive()\par
GetObjectLife()\par
GetObjectMaxLife()\par
GetObjectMana()\par
GetObjectMaxMana()\par
GetObjectBP()\par
GetObjectMaxBP()\par
GetObjectShield()\par
GetObjectMaxShield()\par
GetObjectPKCount()\par
GetObjectPKLevel()\par
GetObjectPKTimer()\par
GetObjectMap()\par
GetObjectMapX()\par
GetObjectMapY()\par
GetObjectDeathMap()\par
GetObjectDeathMapX()\par
GetObjectDeathMapY()\par
GetObjectAuthority()\par
GetObjectPartyNumber()\par
GetObjectGuildNumber()\par
GetObjectGuildStatus() - NEW\par
GetObjectGuildName()\par
\cf1\f1 GetObjectGuildRelationship()\par
GetObjectGuildUnionNumber()\par
GetObjectGuildUnionName()\cf0\f0\par
GetObjectChange()\par
GetObjectInterface()\par
GetObjectMasterLevel()\par
GetObjectMasterPoint()\par
GetObjectMasterPointExt()\cf1\f1  - NEW\cf0\f0\par
GetObjectAccountLevel()\par
GetObjectAccountExpireDate()\par
GetObjectReset()\par
GetObjectMasterReset()\par
GetObjectGensRank()\par
GetObjectGensSymbol()\par
GetObjectGensFamily()\par
GetObjectGensContribution()\par
GetObjectCSGuildSide()\par
GetObjectOfflineFlag()\par
GetObjectIndexByName()\par
SetObjectLevel()\par
SetObjectLevelUpPoint()\par
SetObjectMoney()\par
SetObjectRuud()\par
SetObjectStrength()\par
SetObjectDexterity()\par
SetObjectVitality()\par
SetObjectEnergy()\par
SetObjectLeadership()\par
SetObjectChatLimitTime()\par
SetObjectPKCount()\par
SetObjectPKLevel()\par
SetObjectPKTimer()\par
SetObjectMap()\par
SetObjectMapX()\par
SetObjectMapY()\par
SetObjectMasterLevel()\par
SetObjectMasterPoint()\par
SetObjectMasterPointExt()\cf1\f1  - NEW\cf0\f0\par
SetObjectSkillBlockTime()\par
SetObjectEnemy()\par
CashShopGetPoint()\par
CashShopAddPoint()\par
CashShopSubPoint()\par
ChatTargetSend()\par
CommandCheckGameMasterLevel()\par
CommandGetArgNumber()\par
CommandGetArgString()\par
ConfigReadNumber()\par
ConfigReadString()\par
ConfigSaveString()\par
EffectAdd()\par
EffectDel()\par
EffectCheck()\par
EffectClear()\par
FireworksSend()\par
InventoryGetWearSize()\par
InventoryGetMainSize()\par
InventoryGetFullSize()\par
InventoryGetItemTable()\par
InventoryGetItemIndex()\par
InventoryGetItemCount()\par
InventoryDelItemIndex()\par
InventoryDelItemCount()\par
InventoryGetFreeSlotCount()\par
InventoryCheckSpaceByItem()\par
InventoryCheckSpaceBySize()\par
ItemDrop()\par
ItemDropEx()\par
ItemGive()\par
ItemGiveEx()\par
LevelUpSend()\par
LogPrint()\par
LogColor()\par
MapCheckAttr()\par
MasterLevelUpSend()\par
\cf1\f1 MasterSkillExtInfoSend\cf0\f0 ()\cf1\f1  - NEW\cf0\f0\par
MasterSkillTreeRebuild()\par
MasterSkillTreeExtRebuild()\par
MessageGet()\par
MoneySend()\par
MonsterCreate()\par
MonsterDelete()\par
MonsterSummonCreate()\par
MonsterSummonDelete()\par
MoveUser()\par
MoveUserEx()\par
NoticeSend()\par
NoticeSendToAll()\par
NoticeRegionSend()\par
NoticeGlobalSend()\par
NoticeLangSendToAll()\par
NoticeLangRegionSend()\par
NoticeLangGlobalSend()\par
PartyGetMemberCount()\par
PartyGetMemberIndex()\par
PcPointGetPoint()\par
PcPointAddPoint()\par
PcPointSubPoint()\par
PermissionCheck()\par
PermissionInsert()\par
PermissionRemove()\par
PKLevelSend()\par
PostSend()\par
RandomGetNumber()\par
RandomGetSingle()\par
RuudSend()\par
SkinChangeSend()\par
TimerStartSend()\par
UserDisconnect()\par
UserGameLogout()\par
UserCalcAttribute()\par
UserInfoSend()\par
UserActionSend()\par
UserSetAccountLevel()\par
UserWarehouseOpen()\par
PacketLoad()\par
PacketFree()\par
SQLConnect()\par
SQLDisconnect()\par
SQLCheck()\par
SQLQuery()\par
SQLClose()\par
SQLFetch()\par
SQLGetResult()\par
SQLGetNumber()\par
SQLGetSingle()\par
SQLGetString()\par
SQLAsyncConnect()\par
SQLAsyncDisconnect()\par

\pard\nowidctlpar\sa200\sl276\slmult1 SQLAsyncCheck()\par

\pard\nowidctlpar\sa200 SQLAsyncQuery()\par
SQLAsyncGetResult()\par
SQLAsyncGetNumber()\par
SQLAsyncGetSingle()\par
SQLAsyncGetString()\par
\par
\ul\fs28 FUNCTION DESCRIPTION\ulnone\fs24\par
\par
GetMaxIndex()\b0\par

\pard\nowidctlpar\sa200\sl276\slmult1\par
Return object final index.\par
\par
--------------------------------------------------------------------------------------------------------\par
\par
\b GetMinUserIndex()\b0\par
\par
Return user start index.\par
\par
--------------------------------------------------------------------------------------------------------\par
\par
\b GetMaxUserIndex()\b0\par
 \par
Return user final index.\par
 \par
--------------------------------------------------------------------------------------------------------\par
 \par
\b GetMinMonsterIndex()\b0\par
 \par
Return monster start index.\par
 \par
--------------------------------------------------------------------------------------------------------\par
 \par
\b GetMaxMonsterIndex()\b0\par
 \par
Return monster final index.\par
\par
--------------------------------------------------------------------------------------------------------\par
\par
\b GetGameServerCode()\b0\par
\par
Return Game Server server code.\par
\par
--------------------------------------------------------------------------------------------------------\par
\par
\b GetGameServerLang()\par
\b0\par
Return Game Server default language.\par
\par
--------------------------------------------------------------------------------------------------------\par
\par
\b GetGameServerUpdate()\b0\par
\par
Return Game Server update number.\par
\par
--------------------------------------------------------------------------------------------------------\par
\par
\b GetGameServerVersion()\b0\par
\par
Return Game Server version string.\par
\par
--------------------------------------------------------------------------------------------------------\par
\par
\b GetGameServerCurUser()\b0\par
\par
Return Game Server current users.\par
\par
--------------------------------------------------------------------------------------------------------\par
\par
\b GetGameServerMaxUser()\b0\par
\par
Return Game Server maximum users.\par
\par
--------------------------------------------------------------------------------------------------------\par
\par
\cf1\b\f1 GetLicenseId\cf0 ()\b0\f0\par
\par
Return license id.\par
\par
--------------------------------------------------------------------------------------------------------\par
\par
\cf1\b\f1 GetLicensePackage\cf0 ()\b0\f0\par
\par
Return license package.\par
\par
--------------------------------------------------------------------------------------------------------\par
\par
\cf1\b\f1 GetLicensePlan\cf0 ()\b0\f0\par
\par
Return license plan.\par
\par
--------------------------------------------------------------------------------------------------------\par
\par
\cf1\b\f1 GetLicenseUpdate\cf0 ()\b0\f0\par
\par
Return license update.\par
\par
--------------------------------------------------------------------------------------------------------\par
\par
\cf1\b\f1 GetLicenseCustomerName\cf0 ()\b0\f0\par
\par
Return license customer name.\par
\par
--------------------------------------------------------------------------------------------------------\par
\par
\b GetObjectConnected(aIndex)\b0\par
 \par
aIndex = Object index.\par
 \par
Return object connection state.\par
 \par
--------------------------------------------------------------------------------------------------------\par
\par
\b GetObjectIpAddress(aIndex)\par
\b0  \par
aIndex = Object index.\par
\par
Return object ip address.\par
\par
--------------------------------------------------------------------------------------------------------\par
 \par
\b GetObjectLang(aIndex)\b0\par
 \par
aIndex = Object index.\par
 \par
Return object language.\par
 \par
--------------------------------------------------------------------------------------------------------\par
 \par
\b GetObjectType(aIndex)\b0\par
 \par
aIndex = Object index.\par
 \par
Return object type.\par
 \par
--------------------------------------------------------------------------------------------------------\par
 \par
\b GetObjectAccount(aIndex)\b0\par
 \par
aIndex = Object index.\par
 \par
Return object account.\par
 \par
--------------------------------------------------------------------------------------------------------\par
 \par
\b GetObjectName(aIndex)\b0\par
 \par
aIndex = Object index.\par
 \par
Return object name.\par
 \par
--------------------------------------------------------------------------------------------------------\par
 \par
\b GetObjectPersonalCode(aIndex)\b0\par
 \par
aIndex = Object index.\par
 \par
Return object personal code.\par
 \par
--------------------------------------------------------------------------------------------------------\par
\b\par
GetObjectClass(aIndex)\b0\par
 \par
aIndex = Object index.\par
 \par
Return object class.\par
 \par
--------------------------------------------------------------------------------------------------------\par
 \par
\b GetObjectChangeUp(aIndex)\b0\par
 \par
aIndex = Object index.\par
 \par
Return object evolution.\par
 \par
--------------------------------------------------------------------------------------------------------\par
 \par
\b GetObjectLevel(aIndex)\b0\par
 \par
aIndex = Object index.\par
 \par
Return object level.\par
 \par
--------------------------------------------------------------------------------------------------------\par
 \par
\b GetObjectLevelUpPoint(aIndex)\b0\par
 \par
aIndex = Object index.\par
 \par
Return object level up points.\par
 \par
--------------------------------------------------------------------------------------------------------\par
 \par
\b GetObjectMoney(aIndex)\b0\par
 \par
aIndex = Object index.\par
 \par
Return object zen amount.\par
 \par
--------------------------------------------------------------------------------------------------------\par
 \par
\b GetObjectRuud(aIndex)\par
\b0  \par
aIndex = Object index.\par
 \par
Return object ruud amount.\par
 \par
--------------------------------------------------------------------------------------------------------\par
 \par
\b GetObjectStrength(aIndex)\b0\par
 \par
aIndex = Object index.\par
 \par
Return object strength.\par
 \par
--------------------------------------------------------------------------------------------------------\par
 \par
\b GetObjectDexterity(aIndex)\b0\par
 \par
aIndex = Object index.\par
 \par
Return object dexterity.\par
 \par
--------------------------------------------------------------------------------------------------------\par
 \par
\b GetObjectVitality(aIndex)\b0\par
 \par
aIndex = Object index.\par
 \par
Return object vitality.\par
 \par
--------------------------------------------------------------------------------------------------------\par
 \par
\b GetObjectEnergy(aIndex)\b0\par
 \par
aIndex = Object index.\par
 \par
Return object energy.\par
 \par
--------------------------------------------------------------------------------------------------------\par
 \par
\b GetObjectLeadership(aIndex)\b0\par
 \par
aIndex = Object index.\par
 \par
Return object leadership.\par
 \par
--------------------------------------------------------------------------------------------------------\par
\par
\b GetObjectExtraStrength(aIndex)\b0\par
 \par
aIndex = Object index.\par
 \par
Return object extra strength.\par
 \par
--------------------------------------------------------------------------------------------------------\par
 \par
\b GetObjectExtraDexterity(aIndex)\b0\par
 \par
aIndex = Object index.\par
 \par
Return object extra dexterity.\par
 \par
--------------------------------------------------------------------------------------------------------\par
 \par
\b GetObjectExtraVitality(aIndex)\b0\par
 \par
aIndex = Object index.\par
 \par
Return object extra vitality.\par
 \par
--------------------------------------------------------------------------------------------------------\par
 \par
\b GetObjectExtraEnergy(aIndex)\b0\par
 \par
aIndex = Object index.\par
 \par
Return object extra energy.\par
 \par
--------------------------------------------------------------------------------------------------------\par
 \par
\b GetObjectExtraLeadership(aIndex)\b0\par
 \par
aIndex = Object index.\par
 \par
Return object extra leadership.\par
 \par
--------------------------------------------------------------------------------------------------------\par
\par
 \b GetObjectDefaultStrength(aIndex)\b0\par
 \par
aIndex = Object index.\par
 \par
Return object default strength.\par
 \par
--------------------------------------------------------------------------------------------------------\par
 \par
\b GetObjectDefaultDexterity(aIndex)\b0\par
 \par
aIndex = Object index.\par
 \par
Return object default dexterity.\par
 \par
--------------------------------------------------------------------------------------------------------\par
 \par
\b GetObjectDefaultVitality(aIndex)\b0\par
 \par
aIndex = Object index.\par
 \par
Return object default vitality.\par
 \par
--------------------------------------------------------------------------------------------------------\par
 \par
\b GetObjectDefaultEnergy(aIndex)\b0\par
 \par
aIndex = Object index.\par
 \par
Return object default energy.\par
 \par
--------------------------------------------------------------------------------------------------------\par
 \par
\b GetObjectDefaultLeadership(aIndex)\b0\par
 \par
aIndex = Object index.\par
 \par
Return object default leadership.\par
 \par
--------------------------------------------------------------------------------------------------------\par
\par
\b GetObjectLive(aIndex)\b0\par
 \par
aIndex = Object index.\par
 \par
Return object live state.\par
 \par
--------------------------------------------------------------------------------------------------------\par
\b\par
GetObjectLife(aIndex)\b0\par
 \par
aIndex = Object index.\par
 \par
Return object current life.\par
 \par
--------------------------------------------------------------------------------------------------------\par
 \par
\b GetObjectMaxLife(aIndex)\b0\par
 \par
aIndex = Object index.\par
 \par
Return object maximum life.\par
 \par
--------------------------------------------------------------------------------------------------------\par
 \par
\b GetObjectMana(aIndex)\b0\par
 \par
aIndex = Object index.\par
 \par
Return object current mana.\par
 \par
--------------------------------------------------------------------------------------------------------\par
 \par
\b GetObjectMaxMana(aIndex)\b0\par
 \par
aIndex = Object index.\par
 \par
Return object maximum mana.\par
 \par
--------------------------------------------------------------------------------------------------------\par
 \par
\b GetObjectBP(aIndex)\b0\par
 \par
aIndex = Object index.\par
 \par
Return object current BP.\par
 \par
--------------------------------------------------------------------------------------------------------\par
 \par
\b GetObjectMaxBP(aIndex)\b0\par
 \par
aIndex = Object index.\par
 \par
Return object maximum BP.\par
 \par
--------------------------------------------------------------------------------------------------------\par
 \par
\b GetObjectShield(aIndex)\b0\par
 \par
aIndex = Object index.\par
 \par
Return object current SD.\par
 \par
--------------------------------------------------------------------------------------------------------\par
 \par
\b GetObjectMaxShield(aIndex)\b0\par
 \par
aIndex = Object index.\par
 \par
Return object maximum SD.\par
 \par
--------------------------------------------------------------------------------------------------------\par
 \par
\b GetObjectPKCount(aIndex)\b0\par
 \par
aIndex = Object index.\par
 \par
Return object PK count.\par
 \par
--------------------------------------------------------------------------------------------------------\par
 \par
\b GetObjectPKLevel(aIndex)\b0\par
 \par
aIndex = Object index.\par
 \par
Return object PK level.\par
 \par
--------------------------------------------------------------------------------------------------------\par
\par
\b GetObjectPKTimer(aIndex)\b0\par
\par
aIndex = Object index.\par
\par
Return object PK timer.\par
 \par
--------------------------------------------------------------------------------------------------------\par
\par
\b GetObjectMap(aIndex)\b0\par
 \par
aIndex = Object index.\par
 \par
Return object current map.\par
 \par
--------------------------------------------------------------------------------------------------------\par
 \par
\b GetObjectMapX(aIndex)\b0\par
 \par
aIndex = Object index.\par
 \par
Return object current position X.\par
 \par
--------------------------------------------------------------------------------------------------------\par
 \par
\b GetObjectMapY(aIndex)\b0\par
 \par
aIndex = Object index.\par
 \par
Return object current position Y.\par
 \par
--------------------------------------------------------------------------------------------------------\par
\par
\b GetObjectDeathMap(aIndex)\b0\par
\par
aIndex = Object index.\par
\par
Return object death map.\par
\par
--------------------------------------------------------------------------------------------------------\par
\par
\b GetObjectDeathMapX(aIndex)\b0\par
\par
aIndex = Object index.\par
\par
Return object death position X.\par
\par
--------------------------------------------------------------------------------------------------------\par
\par
\b GetObjectDeathMapY(aIndex)\b0\par
\par
aIndex = Object index.\par
\par
Return object death position Y.\par
\par
--------------------------------------------------------------------------------------------------------\par
 \par
\b GetObjectAuthority(aIndex)\b0\par
 \par
aIndex = Object index.\par
 \par
Return object authority value.\par
 \par
--------------------------------------------------------------------------------------------------------\par
\par
\b GetObjectPartyNumber(aIndex)\b0\par
\par
aIndex = Object index.\par
\par
Return object party number.\par
\par
--------------------------------------------------------------------------------------------------------\par
 \par
\b GetObjectGuildNumber(aIndex)\b0\par
 \par
aIndex = Object index.\par
 \par
Return object guild number.\par
\par
--------------------------------------------------------------------------------------------------------\par
\par
 \b GetObjectGuildStatus(aIndex)\b0\par
 \par
aIndex = Object index.\par
 \par
Return object guild status (0=Member/32=Battle Master/64=Office Master/128= Master).\par
\par
--------------------------------------------------------------------------------------------------------\par
\par
\b GetObjectGuildName(aIndex)\b0\par
 \par
aIndex = Object index.\par
 \par
Return object guild name.\par
\par
--------------------------------------------------------------------------------------------------------\par
 \par
\cf1\b\f1 GetObjectGuildRelationship\cf0 (aIndex,bIndex)\b0\f0\par
 \par
aIndex = Object index.\par
bIndex = Target index.\par
 \par
Return object guild relationship with target (0=None/1=Ally/2=Rival).\par
\par
--------------------------------------------------------------------------------------------------------\par
 \par
\b GetObjectGuildUnionNumber(aIndex)\b0\par
 \par
aIndex = Object index.\par
 \par
Return object guild union number.\par
 \par
--------------------------------------------------------------------------------------------------------\par
 \par
\b GetObjectGuildUnionName(aIndex)\b0\par
 \par
aIndex = Object index.\par
 \par
Return object guild union name.\par
 \par
--------------------------------------------------------------------------------------------------------\par
\par
\b GetObjectChange(aIndex)\b0\par
\par
aIndex = Object index.\par
\par
Return object transformation number.\par
\par
--------------------------------------------------------------------------------------------------------\par
\par
\b GetObjectInterface(aIndex)\par
\b0\par
aIndex = Object index.\par
\par
Return object interface state.\par
\par
--------------------------------------------------------------------------------------------------------\par
 \par
\b GetObjectMasterLevel(aIndex)\b0\par
 \par
aIndex = Object index.\par
 \par
Return object master level.\par
 \par
--------------------------------------------------------------------------------------------------------\par
 \par
\b GetObjectMasterPoint(aIndex)\b0\par
 \par
aIndex = Object index.\par
 \par
Return object master point.\par
 \par
--------------------------------------------------------------------------------------------------------\par
\par
\b GetObjectMasterPointExt(aIndex)\b0\par
 \par
aIndex = Object index.\par
 \par
Return object master point ext.\par
 \par
-------------------------------------------------------------------------------------------------------- \par
\par
\b GetObjectAccountLevel(aIndex)\b0\par
 \par
aIndex = Object index.\par
 \par
Return object account level.\par
 \par
--------------------------------------------------------------------------------------------------------\par
 \par
\b GetObjectAccountExpireDate(aIndex)\b0\par
 \par
aIndex = Object index.\par
 \par
Return object account expire date.\par
 \par
--------------------------------------------------------------------------------------------------------\par
 \par
\b GetObjectReset(aIndex)\b0\par
 \par
aIndex = Object index.\par
 \par
Return object reset amount.\par
 \par
--------------------------------------------------------------------------------------------------------\par
 \par
\b GetObjectMasterReset(aIndex)\b0\par
 \par
aIndex = Object index.\par
 \par
Return object master reset amount.\par
 \par
--------------------------------------------------------------------------------------------------------\par
 \par
\b GetObjectGensRank(aIndex)\b0\par
 \par
aIndex = Object index.\par
 \par
Return object gens global rank.\par
 \par
--------------------------------------------------------------------------------------------------------\par
\par
\b GetObjectGensSymbol(aIndex)\b0\par
 \par
aIndex = Object index.\par
 \par
Return object gens patent symbol number.\par
 \par
--------------------------------------------------------------------------------------------------------\par
\par
\b GetObjectGensFamily(aIndex)\b0\par
 \par
aIndex = Object index.\par
 \par
Return object gens family (0=None/1=Varnert/2=Duprian).\par
 \par
--------------------------------------------------------------------------------------------------------\par
\par
\b GetObjectGensContribution(aIndex)\b0\par
 \par
aIndex = Object index.\par
 \par
Return object gens contribution amount.\par
 \par
--------------------------------------------------------------------------------------------------------\par
\par
\b GetObjectCSGuildSide(aIndex)\b0\par
 \par
aIndex = Object index.\par
 \par
Return object Castle Siege guild side.\par
\par
--------------------------------------------------------------------------------------------------------\par
\par
\b GetObjectOfflineFlag(aIndex)\b0\par
 \par
aIndex = Object index.\par
 \par
Return object offline flag (0=Online/1=Off-Attack/Off-Store).\par
\par
--------------------------------------------------------------------------------------------------------\par
 \par
\b GetObjectIndexByName(aString)\b0\par
 \par
aString = Object name.\par
 \par
Return object index.\par
 \par
--------------------------------------------------------------------------------------------------------\par
 \par
\b SetObjectLevel(aIndex,aValue)\b0\par
 \par
aIndex = Object index.\par
aValue = Level value.\par
 \par
Define object level.\par
 \par
--------------------------------------------------------------------------------------------------------\par
 \par
\b SetObjectLevelUpPoint(aIndex,aValue)\b0\par
 \par
aIndex = Object index.\par
aValue = Level up point value.\par
 \par
Define object level up point.\par
 \par
--------------------------------------------------------------------------------------------------------\par
 \par
\b SetObjectMoney(aIndex,aValue)\b0\par
 \par
aIndex = Object index.\par
aValue = Zen value.\par
 \par
Define object zen amount.\par
 \par
--------------------------------------------------------------------------------------------------------\par
 \par
\b SetObjectRuud(aIndex,aValue)\b0\par
 \par
aIndex = Object index.\par
aValue = Ruud value.\par
 \par
Define object ruud amount.\par
 \par
--------------------------------------------------------------------------------------------------------\par
\par
\b SetObjectStrength(aIndex,aValue)\b0\par
\par
aIndex = Object index.\par
aValue = Strength value.\par
 \par
Define object strength.\par
 \par
--------------------------------------------------------------------------------------------------------\par
 \par
\b SetObjectDexterity(aIndex,aValue)\b0\par
 \par
aIndex = Object index.\par
aValue = Dexterity value.\par
 \par
Define object dexterity.\par
 \par
--------------------------------------------------------------------------------------------------------\par
 \par
\b SetObjectVitality(aIndex,aValue)\b0\par
\par
aIndex = Object index.\par
aValue = Vitality value.\par
 \par
Define object vitality.\par
 \par
--------------------------------------------------------------------------------------------------------\par
 \par
\b SetObjectEnergy(aIndex,aValue)\b0\par
\par
aIndex = Object index. \par
aValue = Energy value.\par
 \par
Define object energy.\par
 \par
--------------------------------------------------------------------------------------------------------\par
 \par
\b SetObjectLeadership(aIndex,aValue)\b0\par
\par
aIndex = Object index.\par
aValue = Leadership value.\par
 \par
Define object leadership.\par
 \par
--------------------------------------------------------------------------------------------------------\par
\par
\b SetObjectChatLimitTime(aIndex,aValue)\b0\par
\par
aIndex = Object index.\par
aValue = Limit time value, in seconds.\par
\par
Define object chat limit time.\par
\par
--------------------------------------------------------------------------------------------------------\par
 \par
\b SetObjectPKCount(aIndex,aValue)\b0\par
 \par
aIndex = Object index.\par
aValue = PK count value.\par
 \par
Define object PK count.\par
\par
--------------------------------------------------------------------------------------------------------\par
 \par
\b SetObjectPKLevel(aIndex,aValue)\b0\par
 \par
aIndex = Object index.\par
aValue = PK level value.\par
 \par
Define object PK level.\par
 \par
--------------------------------------------------------------------------------------------------------\par
\par
\b SetObjectPKTimer(aIndex,aValue)\b0\par
\par
aIndex = Object index.\par
aValue = PK timer value.\par
\par
Define object PK timer.\par
\par
--------------------------------------------------------------------------------------------------------\par
\par
\b SetObjectMap(aIndex,aValue)\par
\b0\par
aIndex = Object index.\par
aValue = Map value.\par
\par
Define object current map.\par
\par
--------------------------------------------------------------------------------------------------------\par
\par
\b SetObjectMapX(aIndex,aValue)\b0\par
\par
aIndex = Object index.\par
aValue = Position X value.\par
\par
Define object current position X.\par
\par
--------------------------------------------------------------------------------------------------------\par
\par
\b SetObjectMapY(aIndex,aValue)\b0\par
\par
aIndex = Object index.\par
aValue = Position Y value.\par
\par
Define object current position Y.\par
\par
--------------------------------------------------------------------------------------------------------\par
 \par
\b SetObjectMasterLevel(aIndex,aValue)\b0\par
 \par
aIndex = Object index.\par
aValue = Master level value.\par
 \par
Define object master level.\par
 \par
--------------------------------------------------------------------------------------------------------\par
 \par
\b SetObjectMasterPoint(aIndex,aValue)\b0\par
 \par
aIndex = Object index.\par
aValue = Master point value.\par
 \par
Define object master point.\par
 \par
--------------------------------------------------------------------------------------------------------\par
\par
\b SetObjectMasterPointExt(aIndex,aValue)\b0\par
 \par
aIndex = Object index.\par
aValue = Master point ext value.\par
 \par
Define object master point ext.\par
 \par
--------------------------------------------------------------------------------------------------------\par
\par
\b SetObjectSkillBlockTime(aIndex,aValue,bValue)\b0\par
\par
aIndex = Object index.\par
aValue = Skill number.\par
bValue = Block time, in miliseconds.\par
\par
Define object skill block time.\par
\par
--------------------------------------------------------------------------------------------------------\par
 \par
\b CashShopGetPoint(aIndex)\b0\par
 \par
aIndex = User index.\par
 \par
Returns Cash Shop coins WCoinC, WCoinP, GoblinPoint.\par
 \par
--------------------------------------------------------------------------------------------------------\par
\b\par
CashShopAddPoint(aIndex,aValue,bValue,cValue)\b0\par
 \par
aIndex = User index.\par
aValue = WCoinC add amount.\par
bValue = WCoinP add amount.\par
cValue = Goblin Point add amount.\par
 \par
Adds Cash Shop coins to the user.\par
 \par
--------------------------------------------------------------------------------------------------------\par
 \par
\b CashShopSubPoint(aIndex,aValue,bValue,cValue)\b0\par
 \par
aIndex = User index.\par
aValue = WCoinC sub amount.\par
bValue = WCoinP sub amount.\par
cValue = Goblin Point sub amount.\par
 \par
Subs Cash Shop coins from the user.\par
 \par
--------------------------------------------------------------------------------------------------------\par
 \par
\b ChatTargetSend(aIndex,bIndex,aString)\b0\par
 \par
aIndex = NPC index.\par
bIndex = User index (-1=send to all near users).\par
aString = Message.\par
 \par
Selected NPC talks to the chosen User.\par
 \par
--------------------------------------------------------------------------------------------------------\par
 \par
\b CommandCheckGameMasterLevel(aIndex,aValue)\b0\par
 \par
aIndex = User index.\par
bValue = Game Master level.\par
 \par
Return (1) if the user have the chosen level, (0) if not.\par
 \par
--------------------------------------------------------------------------------------------------------\par
 \par
\b CommandGetArgNumber(aString,aValue)\b0\par
 \par
aString = Command parameter.\par
aValue = Parameter position.\par
 \par
Return as number the parameter of the chosen position.\par
 \par
--------------------------------------------------------------------------------------------------------\par
 \par
\b CommandGetArgString(aString,aValue)\b0\par
 \par
aString = Command parameter.\par
aValue = Parameter position.\par
 \par
Return as string the parameter of the chosen position.\par
 \par
--------------------------------------------------------------------------------------------------------\par
\par
 \b ConfigReadNumber(aString,bString,cString)\b0\par
 \par
aString = Configuration group name.\par
bString = Configuration name.\par
cString = Configuration file path.\par
 \par
Return as number the chosen configuration.\par
 \par
--------------------------------------------------------------------------------------------------------\par
 \par
\b ConfigReadString(aString,bString,cString)\b0\par
 \par
aString = Configuration group name.\par
bString = Configuration name.\par
cString = Configuration file path.\par
 \par
Return as string the chosen configuration.\par
 \par
--------------------------------------------------------------------------------------------------------\par
\par
\b ConfigSaveString(aString,bString,cString,dString)\par
\b0\par
aString = Configuration group name.\par
bString = Configuration name.\par
cString = Configuration value.\par
dString = Configuration file path.\par
\par
--------------------------------------------------------------------------------------------------------\par
\par
\b EffectAdd(aIndex,aValue,bValue,cValue,dValue,eValue,fValue,gValue)\b0\par
 \par
aIndex = Object index.\par
aValue = Effect mode.\par
bValue = Effect index.\par
cValue = Effect duration, in seconds.\par
dValue = Effect value 1.\par
eValue = Effect value 2.\par
fValue = Effect value 3.\par
gValue = Effect value 4.\par
 \par
Add to the object the chosen effect.\par
 \par
--------------------------------------------------------------------------------------------------------\par
 \par
\b EffectDel(aIndex,aValue)\b0\par
 \par
aIndex = Object index.\par
aValue = Effect index.\par
 \par
Remove from the object the chosen effect.\par
 \par
--------------------------------------------------------------------------------------------------------\par
 \par
\b EffectCheck(aIndex,aValue)\b0\par
 \par
aIndex = Object index.\par
aValue = Effect index.\par
 \par
Return (1) if the object have the chosen effect, (0) if not.\par
 \par
--------------------------------------------------------------------------------------------------------\par
 \par
\b EffectClear(aIndex)\b0\par
 \par
aIndex = Object index.\par
 \par
Remove from the object all effects.\par
 \par
--------------------------------------------------------------------------------------------------------\par
\b\par
FireworksSend(aIndex,aValue,bValue)\b0\par
 \par
aIndex = User index.\par
aValue = Position X.\par
bValue = Position Y.\par
 \par
Send fireworks effect to the chosen position.\par
 \par
--------------------------------------------------------------------------------------------------------\par
\par
\b InventoryGetWearSize()\par
\par
\b0 Return wear inventory max slot.\par
\par
--------------------------------------------------------------------------------------------------------\par
\par
\b InventoryGetMainSize()\par
\par
\b0 Return main inventory max slot.\par
\par
--------------------------------------------------------------------------------------------------------\par
\par
\b InventoryGetFullSize()\par
\par
\b0 Return full inventory max slot.\par
\par
--------------------------------------------------------------------------------------------------------\par
\par
\b InventoryGetItemTable(aIndex,aValue)\b0\par
\par
aIndex = User index.\par
aValue = Slot number.\par
\par
Return the item attribute table from the chosen inventory slot.\par
Table elements: Serial, Index, Level, Durability, Option1, Option2, Option3, NewOption, SetOption, JoHOption, 380Option, SocketOption1, SocketOption2, SocketOption3, SocketOption4, SocketOption5, SocketOptionBonus.\par
\par
--------------------------------------------------------------------------------------------------------\par
\par
\b InventoryGetItemIndex(aIndex,aValue)\b0\par
\par
aIndex = User index.\par
aValue = Slot number.\par
\par
Return the item index from the chosen inventory slot.\par
\par
--------------------------------------------------------------------------------------------------------\par
 \par
\b InventoryGetItemCount(aIndex,aValue,bValue)\b0\par
 \par
aIndex = User index.\par
aValue = Item index.\par
bValue = Item level (-1 any level).\par
 \par
Return the amount of the chosen item in the user inventory.\par
\par
--------------------------------------------------------------------------------------------------------\par
\par
\b InventoryDelItemIndex(aIndex,aValue)\b0\par
\par
aIndex = User index.\par
aValue = Slot number.\par
\par
Remove the item from the chosen inventory slot.\par
\par
--------------------------------------------------------------------------------------------------------\par
\par
\b InventoryDelItemCount(aIndex,aValue,bValue,cValue)\b0\par
 \par
aIndex = User index.\par
aValue = Item index.\par
bValue = Item level (-1 any level).\par
cValue = Item Amount.\par
 \par
Remove from the user inventory the chosen item.\par
 \par
--------------------------------------------------------------------------------------------------------\par
 \par
\b InventoryGetFreeSlotCount(aIndex)\b0\par
 \par
aIndex = User index.\par
 \par
Return the amount of free slots in the user inventory.\par
 \par
--------------------------------------------------------------------------------------------------------\par
 \par
\b InventoryCheckSpaceByItem(aIndex,aValue)\b0\par
 \par
aIndex = User index.\par
aValue = Item index.\par
 \par
Return (1) if the item fits in the user inventory, (0) if not.\par
 \par
--------------------------------------------------------------------------------------------------------\par
 \par
\b InventoryCheckSpaceBySize(aIndex,aValue,bValue)\b0\par
 \par
aIndex = User index.\par
aValue = Item Width.\par
bValue = Item Height.\par
 \par
Return (1) if the item fits in the user inventory, (0) if not.\par
 \par
--------------------------------------------------------------------------------------------------------\par
 \par
\b ItemDrop(aIndex,aValue,bValue,cValue,dValue)\b0\par
 \par
aIndex = User index.\par
aValue = Map number.\par
bValue = Map position X.\par
cValue = Map position Y.\par
dValue = EventItemBag SpecialValue.\par
 \par
Drop at the chosen position an item from an EventItemBag.\par
 \par
--------------------------------------------------------------------------------------------------------\par
 \par
\b ItemDropEx(aIndex,aValue,bValue,cValue,dValue,eValue,fValue,gValue,hValue,iValue,jValue)\b0\par
 \par
aIndex = User index.\par
aValue = Map number.\par
bValue = Map position X.\par
cValue = Map position Y.\par
dValue = Item index.\par
eValue = Item level.\par
fValue = Item Durability.\par
gValue = Item Option1.\par
hValue = Item Option2.\par
iValue = Item Option3.\par
jValue = Item NewOption.\par
kValue = Item SetOption (OPTIONAL).\par
lValue = Item JoHOption (OPTIONAL).\par
mValue = Item 380Option (OPTIONAL).\par
nValue = Item SocketOption1 (OPTIONAL).\par
oValue = Item SocketOption2 (OPTIONAL).\par
pValue = Item SocketOption3 (OPTIONAL).\par
qValue = Item SocketOption4 (OPTIONAL).\par
rValue = Item SocketOption5 (OPTIONAL).\par
sValue = Item SocketOptionBonus (OPTIONAL).\par
tValue = Item Duration (OPTIONAL).\par
uValue = Item owner index (OPTIONAL).\par
\par
Drop at the chosen position the chosen item.\par
 \par
--------------------------------------------------------------------------------------------------------\par
 \par
\b ItemGive(aIndex,aValue)\b0\par
 \par
aIndex = User index.\par
aValue = EventItemBag SpecialValue.\par
 \par
Insert to the user inventory an item from an EventItemBag.\par
 \par
--------------------------------------------------------------------------------------------------------\par
 \par
\b ItemGiveEx(aIndex,aValue,bValue,cValue,dValue,eValue,fValue,gValue)\b0\par
 \par
aIndex = User index.\par
aValue = Item index.\par
bValue = Item level.\par
cValue = Item durability.\par
dValue = Item Option1.\par
eValue = Item Option2.\par
fValue = Item Option3.\par
gValue = Item NewOption.\par
hValue = Item SetOption (OPTIONAL).\par
iValue = Item JoHOption (OPTIONAL).\par
jValue = Item 380Option (OPTIONAL).\par
kValue = Item SocketOption1 (OPTIONAL).\par
lValue = Item SocketOption2 (OPTIONAL).\par
mValue = Item SocketOption3 (OPTIONAL).\par
nValue = Item SocketOption4 (OPTIONAL).\par
oValue = Item SocketOption5 (OPTIONAL).\par
pValue = Item SocketOptionBonus (OPTIONAL).\par
qValue = Item Duration (OPTIONAL).\par
 \par
Insert to the user inventory the chosen item.\par
 \par
--------------------------------------------------------------------------------------------------------\par
 \par
\b LevelUpSend(aIndex)\b0\par
 \par
aIndex = User index.\par
 \par
Update the user level at the client.\par
 \par
--------------------------------------------------------------------------------------------------------\par
 \par
\b LogPrint(aString)\b0\par
 \par
aString = Text.\par
 \par
Insert to the log the chosen text.\par
 \par
--------------------------------------------------------------------------------------------------------\par
\par
\b LogColor(aValue,aString)\b0\par
 \par
aValue = Color (0=Black,1=Red,2=Green,3=Blue).\par
aString = Text.\par
 \par
Insert to the GameServer window log the chosen text.\par
 \par
--------------------------------------------------------------------------------------------------------\par
\b\par
MapCheckAttr(aValue,bValue,cValue,dValue)\b0\par
\par
aValue = Map number.\par
bValue = Map position X.\par
cValue = Map position Y.\par
dValue = Terrain attribute (1=Safe Zone,2=Stand,4=Invalid,8=Invalid,16=Invalid).\par
\par
Return (1) if the chosen position has the attribute, (0) if not.\par
\par
--------------------------------------------------------------------------------------------------------\par
\par
\b MasterLevelUpSend(aIndex)\b0\par
\par
aIndex = User index.\par
 \par
Update the user master level at the client.\par
\par
--------------------------------------------------------------------------------------------------------\par
\par
\b MasterSkillExtInfoSend(aIndex)\b0\par
\par
aIndex = User index.\par
 \par
Update the user master skill ext info at the client.\par
\par
--------------------------------------------------------------------------------------------------------\par
\par
\b MasterSkillTreeRebuild(aIndex,aValue)\b0\par
\par
aIndex = User index.\par
aValue = Group number (0=All).\par
\par
Reset the chosen master skill tree group.\par
\par
--------------------------------------------------------------------------------------------------------\par
\par
\b MasterSkillTreeExtRebuild(aIndex,aValue)\b0\par
\par
aIndex = User index.\par
\par
Reset the extended skill tree.\par
\par
--------------------------------------------------------------------------------------------------------\par
 \par
\b MessageGet(aValue,bValue)\b0\par
 \par
aValue = Message index.\par
bValue = Language.\par
 \par
Return the chosen message from "Message.txt".\par
 \par
--------------------------------------------------------------------------------------------------------\par
 \par
\b MoneySend(aIndex,aValue)\b0\par
 \par
aIndex = User index.\par
aValue = Zen amount.\par
 \par
Update the user zen at the client.\par
 \par
--------------------------------------------------------------------------------------------------------\par
 \par
\b MonsterCreate(aValue,bValue,cValue,dValue,eValue)\b0\par
 \par
aValue = Monster number.\par
bValue = Map number.\par
cValue = Map position X.\par
dValue = Map position Y.\par
eValue = Turn direction.\par
 \par
Put a monster at the chosen position.\par
 \par
--------------------------------------------------------------------------------------------------------\par
 \par
\b MonsterDelete(aIndex)\b0\par
 \par
aIndex = Monster index.\par
 \par
Remove the chosen monster.\par
 \par
--------------------------------------------------------------------------------------------------------\par
 \par
\b MonsterSummonCreate(aIndex,aValue,bValue,cValue,dValue,eValue,fValue)\b0\par
 \par
aIndex = User index.\par
aValue = Monster number.\par
bValue = Extra life rate.\par
cValue = Extra defense rate.\par
dValue = Extra defense success rate.\par
eValue = Extra damage rate.\par
fValue = Extra damage success rate.\par
 \par
Add the chosen summon monster to the user.\par
 \par
--------------------------------------------------------------------------------------------------------\par
 \par
\b MonsterSummonDelete(aIndex)\b0\par
 \par
aIndex = User index.\par
 \par
Remove the monster summon from the user.\par
 \par
--------------------------------------------------------------------------------------------------------\par
 \par
\b MoveUser(aIndex,aValue)\b0\par
 \par
aIndex = User index.\par
aValue = Gate number.\par
 \par
Move the user to the chosen gate.\par
 \par
--------------------------------------------------------------------------------------------------------\par
 \par
\b MoveUserEx(aIndex,aValue,bValue,cValue)\b0\par
 \par
aIndex = User index.\par
aValue = Map number.\par
bValue = Map position X.\par
cValue = Map position Y.\par
 \par
Move the user to the chosen position.\par
 \par
--------------------------------------------------------------------------------------------------------\par
 \par
\b NoticeSend(aIndex,aValue,aString)\b0\par
 \par
aIndex = Index do jogador.\par
aValue = Message type (0=Global/1=System).\par
aString = Message.\par
 \par
Send a message to the user.\par
 \par
--------------------------------------------------------------------------------------------------------\par
 \par
\b NoticeSendToAll(aValue,aString)\b0\par
 \par
aValue = Message type (0=Global/1=System).\par
aString = Message.\par
 \par
Send a message to all users in the room.\par
 \par
--------------------------------------------------------------------------------------------------------\par
\par
\b NoticeRegionSend(aValue,aString)\b0\par
 \par
aValue = Message type (0=Global/1=System).\par
aString = Message.\par
 \par
Send a message to all users in connected rooms.\par
\par
--------------------------------------------------------------------------------------------------------\par
\par
\b NoticeGlobalSend(aValue,aString)\b0\par
 \par
aValue = Message type (0=Global/1=System)\par
aString = Message.\par
 \par
Send a message to all users in all rooms.\par
\par
--------------------------------------------------------------------------------------------------------\par
\par
\b NoticeLangSendToAll(aValue,aString,bString,cString)\b0\par
 \par
aValue = Message type (0=Global/1=System).\par
aString = Message Eng.\par
bString = Message Por.\par
cString = Message Spn.\par
 \par
Send a message to all users in the room.\par
 \par
--------------------------------------------------------------------------------------------------------\par
\par
\b NoticeLangRegionSend(aValue,aString,bString,cString)\b0\par
 \par
aValue = Message type (0=Global/1=System).\par
aString = Message Eng.\par
bString = Message Por.\par
cString = Message Spn.\par
 \par
Send a message to all users in connected rooms.\par
\par
--------------------------------------------------------------------------------------------------------\par
\par
\b NoticeLangGlobalSend(aValue,aString,bString,cString)\b0\par
 \par
aValue = Message type (0=Global/1=System)\par
aString = Message Eng.\par
bString = Message Por.\par
cString = Message Spn.\par
 \par
Send a message to all users in all rooms.\par
\par
--------------------------------------------------------------------------------------------------------\par
\par
\b PartyGetMemberCount(aValue)\b0\par
\par
aValue = Party index.\par
\par
Return the amount of users in the party.\par
\par
--------------------------------------------------------------------------------------------------------\par
\par
\b PartyGetMemberIndex(aValue,bValue)\b0\par
\par
aValue = Party index.\par
bValue = Member slot.\par
\par
Return the index of the user at the chosen slot.\par
\par
--------------------------------------------------------------------------------------------------------\par
 \par
\b PcPointGetPoint(aIndex)\b0\par
 \par
aIndex = User index.\par
 \par
Return PcPoint value.\par
 \par
--------------------------------------------------------------------------------------------------------\par
\b\par
PcPointAddPoint(aIndex,aValue)\b0\par
 \par
aIndex = User index.\par
aValue = PcPoint add amount.\par
 \par
Adds PcPoint to the user.\par
 \par
--------------------------------------------------------------------------------------------------------\par
 \par
\b PcPointSubPoint(aIndex,aValue)\b0\par
 \par
aIndex = User index.\par
aValue = PcPoint sub amount.\par
 \par
Subs PcPoint from the user.\par
 \par
--------------------------------------------------------------------------------------------------------\par
\par
\b PermissionCheck(aIndex,aValue)\par
\par
\b0 aIndex = User index.\par
aValue = Permission number.\par
\par
Permission list:\par
1 = Move Item.\par
2 = Sell Item.\par
3 = Buy Item.\par
4 = Use Item.\par
5 = Drop Item.\par
6 = Pick Item.\par
7 = Open Trade.\par
8 = Open Personal Shop.\par
9 = Use Chaos Machine.\par
10 = Open Cash Shop.\par
11 = Use Chat.\par
12 = Move character.\par
\par
Return (1) if the user has the chosen permission, (0) if not.\par
\par
--------------------------------------------------------------------------------------------------------\par
\par
\b PermissionInsert(aIndex,aValue)\par
\par
\b0 aIndex = User index.\par
aValue = Permission number.\par
\par
Insert chosen permission to the user.\par
\par
--------------------------------------------------------------------------------------------------------\par
\par
\b PermissionRemove(aIndex,aValue)\par
\par
\b0 aIndex = User index.\par
aValue = Permission number.\par
\par
Remove chosen permission from the user.\par
\par
--------------------------------------------------------------------------------------------------------\par
 \par
\b PKLevelSend(aIndex,aValue)\b0\par
 \par
aIndex = User index.\par
aValue = PK level.\par
 \par
Update the PK level at the client.\par
 \par
--------------------------------------------------------------------------------------------------------\par
\par
\b PostSend(aValue,bValue,aString,bString)\par
\par
\b0 aValue = Post type.\par
bValue = Message index.\par
aString = User name.\par
bString = Message.\par
\par
Send a message in post format.\par
\par
--------------------------------------------------------------------------------------------------------\par
\par
\b RandomGetNumber(aValue)\par
\par
\b0 aValue = Maximum number.\par
\par
Return a random value within the selected range.\b\par
\b0\par
--------------------------------------------------------------------------------------------------------\par
\par
\b RandomGetSingle(aValue)\par
\b0\par
aValue = Maximum number.\par
\par
Return a random floating point value within the selected range.\par
\par
--------------------------------------------------------------------------------------------------------\par
 \par
\b RuudSend(aIndex,aValue)\b0\par
 \par
aIndex = User index.\par
aValue = Ruud amount.\par
 \par
Update the ruud amount at the client.\par
 \par
--------------------------------------------------------------------------------------------------------\par
 \par
\b SkinChangeSend(aIndex,aValue)\par
\b0  \par
aIndex = User index.\par
aValue = Monster number.\par
 \par
Transform the user to the chosen monster.\par
\par
--------------------------------------------------------------------------------------------------------\par
 \par
\b TimerStartSend(aIndex,aValue,bValue,cValue)\par
\b0  \par
aIndex = User index.\par
aValue = Timer type.\par
bValue = Timer flag.\par
cValue = Time in seconds.\par
 \par
Show a timer at selected player screen (Season13+ ONLY).\par
 \par
--------------------------------------------------------------------------------------------------------\par
\par
\b UserDisconnect(aIndex)\b0\par
 \par
aIndex = User index.\par
 \par
Disconnect the user.\par
 \par
--------------------------------------------------------------------------------------------------------\par
\par
\b UserGameLogout(aIndex,aValue)\b0\par
\par
aIndex = User index.\par
aValue = Logout type (0=Close Game,1=Select Char,2=Select Server).\par
\par
Logout the user.\par
\par
--------------------------------------------------------------------------------------------------------\par
\par
\b UserCalcAttribute(aIndex)\b0\par
\par
aIndex = User index.\par
 \par
Update user attributes.\par
 \par
--------------------------------------------------------------------------------------------------------\par
\par
\b UserInfoSend(aIndex)\b0\par
\par
aIndex = User index.\par
\par
Update user info at the client.\par
\par
--------------------------------------------------------------------------------------------------------\par
\par
\b UserActionSend(aIndex,bIndex,aValue)\par
\par
\b0 aIndex = User index.\par
bIndex = Target user index.\par
aValue = Action number.\par
\par
User performs the chosen action.\par
\par
--------------------------------------------------------------------------------------------------------\par
 \par
\b UserSetAccountLevel(aIndex,aValue,bValue)\par
\par
\b0 aIndex = User index.\par
aValue = Account level.\par
bValue = Account expire time, in seconds.\par
\par
Set user account level.\par
\par
--------------------------------------------------------------------------------------------------------\par
\par
\b UserWarehouseOpen(aIndex)\par
\par
\b0 aIndex = User index.\par
aValue = Warehouse number (OPTIONAL).\par
\par
Opens user current warehouse.\par
\par
--------------------------------------------------------------------------------------------------------\par
\par
\b SQLConnect(aString,bString,cString)\b0\par
 \par
aString = ODBC name.\par
bString = MSSQL user.\par
cString = MSSQL password.\par
 \par
Connect to MSSQL database.\par
 \par
--------------------------------------------------------------------------------------------------------\par
 \par
\b SQLDisconnect()\b0\par
 \par
Disconnect from MSSQL database.\par
 \par
--------------------------------------------------------------------------------------------------------\par
 \par
\b SQLCheck()\b0\par
 \par
Return (1) if MSSQL is already connected, (0) if not.\par
 \par
--------------------------------------------------------------------------------------------------------\par
 \par
\b SQLQuery(aString)\b0\par
 \par
aString = Query.\par
 \par
Execute the query, return (0) if it fails.\par
 \par
--------------------------------------------------------------------------------------------------------\par
 \par
\b SQLClose()\b0\par
 \par
Close the last query.\par
 \par
--------------------------------------------------------------------------------------------------------\par
 \par
\b SQLFetch()\b0\par
 \par
Load the results of the last query, return (0) if it fails.\par
 \par
--------------------------------------------------------------------------------------------------------\par
 \par
\b SQLGetResult(aValue)\b0\par
 \par
aValue = Result number.\par
 \par
Return as number the chosen result.\par
 \par
--------------------------------------------------------------------------------------------------------\par
 \par
\b SQLGetNumber(aString)\b0\par
 \par
aString = Column name.\par
 \par
Return as number the chosen column.\par
 \par
--------------------------------------------------------------------------------------------------------\par
 \par
\b SQLGetSingle(aString)\b0\par
 \par
aString = Column name.\par
 \par
Return as float the chosen column.\par
 \par
--------------------------------------------------------------------------------------------------------\par
 \par
\b SQLGetString(aString)\b0\par
 \par
aString = Column name.\par
 \par
Return as string the chosen column.\par
\par
--------------------------------------------------------------------------------------------------------\par
\par
\b SQLAsyncConnect(aString,bString,cString)\b0\par
 \par
aString = ODBC name.\par
bString = MSSQL user.\par
cString = MSSQL password.\par
 \par
Connect to MSSQL database with async execution.\par
 \par
--------------------------------------------------------------------------------------------------------\par
 \par
\b SQLAsyncDisconnect()\b0\par
 \par
Disconnect from MSSQL database.\par
 \par
--------------------------------------------------------------------------------------------------------\par
 \par
\b SQLAsyncCheck()\b0\par
 \par
Return (1) if MSSQL is already connected, (0) if not.\par
 \par
--------------------------------------------------------------------------------------------------------\par
 \par
\b SQLAsyncQuery(aString)\b0\par
 \par
aString = Query.\par
bString = Async execution identification label (OPTIONAL).\par
cString = Parameter used to pass info to the callback function (OPTIONAL).\par
 \par
Put the query at async execution queue, return (0) if it fails.\par
 \par
--------------------------------------------------------------------------------------------------------\par
 \par
\b SQLAsyncGetResult(aValue)\b0\par
 \par
aValue = Result number.\par
 \par
Return as number the chosen result. Only work inside bridge function OnSQLAsyncResult.\par
 \par
--------------------------------------------------------------------------------------------------------\par
 \par
\b SQLAsyncGetNumber(aString)\b0\par
 \par
aString = Column name.\par
 \par
Return as number the chosen column. Only work inside bridge function OnSQLAsyncResult.\par
 \par
--------------------------------------------------------------------------------------------------------\par
 \par
\b SQLAsyncGetSingle(aString)\b0\par
 \par
aString = Column name.\par
 \par
Return as float the chosen column. Only work inside bridge function OnSQLAsyncResult.\par
 \par
--------------------------------------------------------------------------------------------------------\par
 \par
\b SQLAsyncGetString(aString)\b0\par
 \par
aString = Column name.\par
 \par
Return as string the chosen column. Only work inside bridge function OnSQLAsyncResult.\par
}
 